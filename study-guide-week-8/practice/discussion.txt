Runtime
-------

1. When calculating the Big O notation for a particular algorithm, it's necessary
to consider the length of time it takes for the algorithm to run as the algorithm's
workload approaches infinity. What determines the **workload** of figuring out
whether your box of animal crackers contains an elephant?


2. Order the following runtimes in descending order of efficiency (that is,
	fastest runtimes first, slowest last) as `n` approaches infinity:

   - O(1)

   - O(log n)

   - O(n)

   - O(n log n)

   - O(n^2)

   - O(2^n)


In the file called `runtime.py`, there are 5 functions.

1. What is the runtime for `string_compare`? O(n)

2. What is the runtime for `has_exotic_animals`? O(n)

3. What is the runtime for `sum_zero_1`? O(n)

4. What is the runtime for `sum_zero_2`? O(n^2)

5. What is the runtime for `sum_zero_3`? O(n^3)


Stacks and Queues
-----------------

1. In the following cases, would a stack or queue be a more appropriate data
	structure?

  - The process of loading and unloading pallets onto a flatbed truck --> Stack

  - Putting bottle caps on bottles of beer as they roll down an assembly line --> Queue


2. Describe two more situations where a queue would be an appropriate data
	structure. a printer queue, ajax requests

3. Describe two more situations where a stack would be an appropriate data
	structure. browser history, an undo/redo functionality


Linked Lists
------------

1. Given the linked list shown in the instructions, which are the nodes? What is
the data for each node? Where is the head? Where is the tail? (Be as specific as
possible --- exactly which parts of the diagram correspond to each part? Arrows?
Boxes? Text?)
      the entire 2-part box is the node
      the data is the text in the first box in each node
      the head is the first node in the list, currently the node with "Apple" as its data
      the tail is the last node in the list, currently the node with "Cherry" as its data


2. What's the difference between doubly- and singly-linked lists?
    In a singly LL each node points only to the node that comes directly after it (next),
      except for the tail which points to None
    In a doubly LL each node still points to a 'next' node, and each node also points to the
      node that comes directly before it (prev), for the head 'prev' will point to None

3. Why is it faster to append to a linked list if we keep track of the `tail`
as an attribute?
  Because LLs aren't indexed, the only way to access the end is with the 'tail' property.
  If the tail is not tracked, you have to iterate throughthe whole list to find the end


Trees
-----

1. What would be the best data structure to use for keeping track of nodes to
	visit during a Breadth First Search of a tree? a queue

2. What would be the best data structure to use for keeping track of nodes to
	visit during a Depth First Search of a tree? a stack
